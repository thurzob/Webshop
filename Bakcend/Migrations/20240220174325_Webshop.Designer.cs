// <auto-generated />
using System;
using Bakcend.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bakcend.Migrations
{
    [DbContext(typeof(WebshopContext))]
    [Migration("20240220174325_Webshop")]
    partial class Webshop
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_general_ci")
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("Bakcend.Models.Merchant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("Price")
                        .HasColumnType("int(50)");

                    b.Property<string>("SerialName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "UserId");

                    b.ToTable("merchant", (string)null);
                });

            modelBuilder.Entity("Bakcend.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("Orders")
                        .HasColumnType("int(20)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("Bakcend.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("Price")
                        .HasColumnType("int(100)");

                    b.Property<string>("SerialName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("Bakcend.Models.Quantity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(100)");

                    b.Property<int>("MerchantId")
                        .HasColumnType("int(11)");

                    b.Property<int>("QuantityPurchased")
                        .HasColumnType("int(100)")
                        .HasColumnName("quantityPurchased");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "MerchantId" }, "MerchantId");

                    b.ToTable("quantity", (string)null);
                });

            modelBuilder.Entity("Bakcend.Models.Storage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("Existing")
                        .HasColumnType("int(20)");

                    b.Property<int>("Sold")
                        .HasColumnType("int(20)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("storage", (string)null);
                });

            modelBuilder.Entity("Bakcend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int(20)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Bakcend.Models.Merchant", b =>
                {
                    b.HasOne("Bakcend.Models.User", "User")
                        .WithMany("Merchant")
                        .HasForeignKey("UserId")
                        .HasConstraintName("merchant_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bakcend.Models.Quantity", b =>
                {
                    b.HasOne("Bakcend.Models.Merchant", "Merchant")
                        .WithMany("Quantity")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("quantity_ibfk_1");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Bakcend.Models.Merchant", b =>
                {
                    b.Navigation("Quantity");
                });

            modelBuilder.Entity("Bakcend.Models.User", b =>
                {
                    b.Navigation("Merchant");
                });
#pragma warning restore 612, 618
        }
    }
}
